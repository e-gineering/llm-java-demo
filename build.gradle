plugins {
	id 'java'
	id 'com.github.node-gradle.node' version '7.0.1'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'org.barfuin.gradle.taskinfo' version '2.1.0'
	id 'org.springframework.boot' version '3.2.0'
}

group = 'com.egineering.ai'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven {
		name = "Spring Snapshots"
		url = "https://repo.spring.io/snapshot"
	}
}

dependencies {
	implementation 'dev.langchain4j:langchain4j:0.25.0'
	implementation 'dev.langchain4j:langchain4j-chroma:0.25.0'
	implementation 'dev.langchain4j:langchain4j-embeddings-all-minilm-l6-v2:0.25.0'
	implementation 'dev.langchain4j:langchain4j-ollama:0.25.0'
	implementation 'dev.langchain4j:langchain4j-open-ai-spring-boot-starter:0.25.0'
	implementation 'dev.langchain4j:langchain4j-document-parser-apache-pdfbox:0.25.0'
	implementation 'io.github.amikos-tech:chromadb-java-client:0.1.2'
	implementation 'org.liquibase:liquibase-core'
	implementation 'org.liquibase.ext:liquibase-mongodb:4.24.0'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//	implementation 'org.springframework.experimental.ai:spring-ai-openai-spring-boot-starter:0.7.1-SNAPSHOT'
//	implementation 'org.springframework.experimental.ai:spring-ai-pdf-document-reader:0.7.1-SNAPSHOT'
//	implementation 'org.springframework.experimental.ai:spring-ai-chroma-store:0.7.1-SNAPSHOT'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register('cleanWebapp') {
	delete file("${projectDir}/src/main/webapp/dist")
	def staticResources = file("${projectDir}/src/main/resources/static")
	if (staticResources.exists()) delete staticResources.listFiles()
}

clean.dependsOn cleanWebapp

tasks.register('buildWebapp', NpmTask) {
	args = ['run', 'build']
	def workingDir = "${projectDir}/src/main/webapp"
	execOverrides {
		it.workingDir = workingDir
	}
	delete file("${projectDir}/src/main/resources/static").listFiles()
	doLast {
		copy {
			from fileTree("${workingDir}/dist/webapp/browser").include('**/*')
			into "${projectDir}/src/main/resources/static"
		}
	}
}
