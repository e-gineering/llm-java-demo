package com.egineering.ai.llmjavademo.services;

import com.egineering.ai.llmjavademo.agents.SqlAgent;
import dev.langchain4j.data.document.Metadata;
import dev.langchain4j.data.segment.TextSegment;
import dev.langchain4j.retriever.Retriever;
import org.springframework.jdbc.core.JdbcTemplate;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class SqlRetriever implements Retriever<TextSegment> {

    private static final String DDL_SQL = """
            SELECT
              'CREATE TABLE ' || relname || ' (' ||
              array_to_string(array_agg('''' || column_name || '''' || ' ' ||  type || ' ' || not_null), ', ') || ');'
            from
            (
              SELECT
                c.relname, a.attname AS column_name,
                pg_catalog.format_type(a.atttypid, a.atttypmod) as type,
                case
                  when a.attnotnull
                then 'NOT NULL'
                else 'NULL'
                END as not_null
              FROM pg_class c,
               pg_attribute a,
               pg_type t
               WHERE c.relname in('wide_flange_beam_type', 'wide_flange_beam', 'square_tubing_type', 'square_tubing')
               AND a.attnum > 0
               AND a.attrelid = c.oid
               AND a.atttypid = t.oid
             ORDER BY a.attnum
            ) as tabledefinition
            group by relname
            """;

    private final JdbcTemplate jdbcTemplate;
    private final SqlAgent sqlAgent;

    public SqlRetriever(JdbcTemplate jdbcTemplate, SqlAgent sqlAgent) {
        this.jdbcTemplate = jdbcTemplate;
        this.sqlAgent = sqlAgent;
    }

    @Override
    public List<TextSegment> findRelevant(String text) {

//        List<Map<String, Object>> tableDdlResult = jdbcTemplate.queryForList(DDL_SQL);
//
//        String tableDdl = tableDdlResult.stream()
//                .map(m -> m.values().stream()
//                        .map(Object::toString)
//                        .collect(Collectors.joining()))
//                .collect(Collectors.joining("\n"));

        String tableDdl = """
                CREATE TABLE public.square_tubing (
                    id integer NOT NULL,
                    type integer NOT NULL,
                    stock integer NOT NULL
                );
                ALTER TABLE public.square_tubing ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
                    SEQUENCE NAME public.square_tubing_id_seq
                    START WITH 1
                    INCREMENT BY 1
                    NO MINVALUE
                    NO MAXVALUE
                    CACHE 1
                );
                CREATE TABLE public.square_tubing_type (
                    id integer NOT NULL,
                    size_in_inches numeric,
                    gauge character varying,
                    thickness numeric,
                    weight_per_foot numeric
                );
                ALTER TABLE public.square_tubing_type ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
                    SEQUENCE NAME public.square_tubing_type_id_seq
                    START WITH 1
                    INCREMENT BY 1
                    NO MINVALUE
                    NO MAXVALUE
                    CACHE 1
                );
                CREATE TABLE public.wide_flange_beam (
                    id integer NOT NULL,
                    type integer NOT NULL,
                    stock integer NOT NULL
                );
                ALTER TABLE public.wide_flange_beam ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
                    SEQUENCE NAME public.wide_flange_beam_id_seq
                    START WITH 1
                    INCREMENT BY 1
                    NO MINVALUE
                    NO MAXVALUE
                    CACHE 1
                );
                CREATE TABLE public.wide_flange_beam_type (
                    id integer NOT NULL,
                    size_width_in_inches numeric,
                    size_height_in_inches numeric,
                    weight_per_foot numeric,
                    section_depth numeric,
                    flange_width numeric,
                    flange_thickness numeric,
                    web_thickness numeric,
                    weight_per_forty_feet integer,
                    weight_per_sixty_feet integer
                );
                ALTER TABLE public.wide_flange_beam_type ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
                    SEQUENCE NAME public.wide_flange_beam_type_id_seq
                    START WITH 1
                    INCREMENT BY 1
                    NO MINVALUE
                    NO MAXVALUE
                    CACHE 1
                );
                ALTER TABLE ONLY public.square_tubing
                    ADD CONSTRAINT square_tubing_pkey PRIMARY KEY (id);
                ALTER TABLE ONLY public.square_tubing_type
                    ADD CONSTRAINT square_tubing_type_pkey PRIMARY KEY (id);
                ALTER TABLE ONLY public.wide_flange_beam
                    ADD CONSTRAINT wide_flange_beam_pkey PRIMARY KEY (id);
                ALTER TABLE ONLY public.wide_flange_beam_type
                    ADD CONSTRAINT wide_flange_beam_type_pkey PRIMARY KEY (id);
                ALTER TABLE ONLY public.square_tubing
                    ADD CONSTRAINT fk_square_tubing_square_tubing_type FOREIGN KEY (type) REFERENCES public.square_tubing_type(id);
                ALTER TABLE ONLY public.wide_flange_beam
                    ADD CONSTRAINT fk_wide_flange_beam_wide_flange_beam_type FOREIGN KEY (type) REFERENCES public.wide_flange_beam_type(id);""";

        String sql = sqlAgent.generate(tableDdl, text);

        List<Map<String, Object>> results = jdbcTemplate.queryForList(sql); // SQL injection!

        return results.stream()
                .map(stringObjectMap -> stringObjectMap.entrySet().stream()
                        .map(stringObjectEntry -> stringObjectEntry.getKey() + ": " + stringObjectEntry.getValue().toString()).collect(Collectors.joining(",")))
                .map(row -> new TextSegment(row, new Metadata()))
                .toList();
    }
}
